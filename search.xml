<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu笔记：重装ubuntu——记一次辛酸血泪史]]></title>
    <url>%2F2019%2F09%2F14%2Fubuntu%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%87%8D%E8%A3%85ubuntu%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BE%9B%E9%85%B8%E8%A1%80%E6%B3%AA%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[本文参考自：https://blog.csdn.net/Spacegene/article/details/86659349 这是不久前我踩过的一个巨坑，在这里我想先强调一下：不要升级linux发行版！！！重要的事情说三遍！！！不要升级linux发行版！！！重要的事情说三遍！！！不要升级linux发行版！！！重要的事情说三遍！！！为什么？不要问我为什么。我按系统提示升级ubuntu到18.04LTS后，就再也进不去系统了。不信你可以尝试一下，你将会看到如下界面： 注：图片来自网络，我就不再为了截图而踩一次坑了。 不仅是图形界面，命令行界面也进不去了（据说可以在重启时选择recovery mode并且狂按回车强行进入界面，但我失败了）。不过如果你真的尝试了并且掉坑里了的话，没关系，你获得了一个很好的重装系统的锻炼机会。下面我们就按步骤锻炼一下。 准备 U盘准备一个2G以上的无用的U盘，或者备份好里面的文件。然后将其格式化。 镜像下载ubuntu16.04LTS镜像到本地。 删除分区你可以通过控制面板中的创建并格式化硬盘分区来看到你的windows与ubuntu分区的情况。（以下操作都是针对重装，不再重新分区，需要的可以自行上网查找教程）在重新安装ubuntu16.04之前我们需要删除原先Ubuntu的EFI分区及启动引导项，这里推荐直接使用windows下的diskpart来删除。使用win+R输入diskpart打开diskpart.exe，允许其对设备进行更改。 接下来使用如下命令查看分区，我的笔记本只有一块SSD，两个系统都装在上面，故进入disk 0. 其中类型未知的便是分给ubuntu的分区，我这里有一块8G的swap分区和60G的/分区。接下来执行如下命令：1234select partition 7delete partition override #删除该分区select partition 8delete partition override #删除该分区 注意：以上命令是针对我的情况，具体请按照对应ubuntu分区的序号删除。 现在你可以在控制面板中的创建并格式化硬盘分区中看到你删除的分区已经合并成一块未分配的空间，这也意味着你与你原来ubuntu上的数据彻底说再见了。 删除ubuntu启动引导项首先下载EasyUEFI，使用免费试用版即可。下载完成后安装，打开EasyUEFI如图： 选择管理EFI启动选项Manage EFI Boot Option，然后选择ubuntu启动引导项，点击中间的删除按钮来删除该引导项。现在重新启动，你会发现已经没有让你选择系统的引导界面，而是直接进入windows系统。 制作启动U盘首先我们下载一个免费的U盘制作工具rufus此时插入已经格式化的U盘，打开rufus，一般情况下它会自动选择U盘，你也可以在device选项下手动选择或确认。点击select，选择之前下载好的镜像文件。其他设置保留默认即可，不放心的话可以比对下图： 然后start开始制作。如果此时rufus提示需要下载一些其它文件，选择Yes继续即可。没有问题的话制作完的U盘会如图所示： 在下面的步骤中，请一直插着U盘不要拔。 安装现在重新启动电脑，开机的过程中不停地快按F12进入bios界面（我的是戴尔的电脑，不同电脑按键或有不同，自行百度）。随后选择U盘启动（不同电脑这个界面也可能不一样，具体可以百度，印象中是选择UEFI BOOT中UEFI：U盘名那项）。接下来就进入了紫红色的GNU GRUB界面，选择install ubuntu。随后就是写比较简单的安装过程，基本上可以按默认进行，因为是重装，好像不需要联网安装且有汉化包。接下来是比较重要的部分：进入installation type界面后，选择其他选项something else，这样我们就可以自己配置ubuntu分区了，点击继续。接下来会进入一个磁盘分区的界面，选中之前清出来的未分配分区（名为“空闲”，也可以通过大小来判断），点击下方+号，新建一个swap分区，大小为8G左右（一般和电脑的内存相当即可，具体还有待研究，不分这个区会有警告）。再次双击空闲分区，挂载点下拉，选择/。在安装启动引导器的设备选项中，选择Windows boot manager。结果可以参考下图： 确认无误后点击现在安装，然后就一路默认直到安装完成。 后期别忘了把U盘格式化回来，可以继续使用，留着做纪念也行，说不定哪天又要重装。]]></content>
  </entry>
  <entry>
    <title><![CDATA[ubuntu笔记：释放空间]]></title>
    <url>%2F2019%2F09%2F14%2Fubuntu%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[前一篇讲了如何清理windows下的空间，然而虽然ubuntu中垃圾文件没win10那么多，可是我给ubuntu分配的空间比win10少得多了，于是我又找了些清理ubuntu的方法。 删除apt-get下载的软件包直接在终端执行sudo apt-get autoclean 删除缓存的所有软件包sudo apt-get clean 删除其他软件依赖的但现在已不用的软件包sudo apt-get autoremove这条命令执行后，软件的配置文件还是会保留的。 清除所有已删除包的残馀配置文件dpkg -l |grep ^rc|awk &#39;{print $2}&#39; |sudo xargs dpkg -P可以把上面四个命令按顺序执行一遍，就完成了对ubuntu系统的空间释放。]]></content>
  </entry>
  <entry>
    <title><![CDATA[windows笔记：释放空间]]></title>
    <url>%2F2019%2F09%2F14%2Fwindows%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[暑假里想跑CVPR中的代码，发现作者提供的环境配置都是基于linux终端的，这样windows的git bash就满足不了我了。二话不说我花了两天时间装了个ubuntu+windows双系统，好不容易装好了，却发现我的硬盘空间已经岌岌可危（理论上要留内存的三倍左右可以保证系统顺畅运行，我的内存是8G，也就是说我C盘应空出20G左右为宜）。于是我就找了些释放空间的办法，分享在这里。 利用磁盘属性进行清理这是最稳的方法，但释放的空间也相对较少，不过还是有效的。选择“此电脑”，右键C盘，属性，然后就可以在常规下面看到磁盘清理。一般按默认选择的进行清理，当然全点上勾也无所谓。 另外在工具下面你可以看到一个优化的选项，一般系统会定期自动执行优化，如果你是强迫症，时时刻刻都容不得一点冗余的话，可以手动优化。 据我们数据结构的老师说，由于数据在存储时大多是稀疏矩阵，存在许多的空间浪费，而磁盘碎片整理优化的就是这个。 删除临时文件这里有两个临时文件中的全部文件可以删除，一个是C:\Users\用户名\AppData\Local\Temp目录下的文件，这里是临时文件最多的地方，可以上到几个G；另一个是C:\Windows\Temp，这里文件大小相对较小，可以忽略不计。另外我也找到了一些其他的临时文件，但似乎它们的体积都是0，可能是系统自动清理了。 注意：千万不要误删上一级目录！如果担心删除出错，可先放到回收站，重启之后看有无异常再做决定。亲测上述两个文件夹中的所有文件均可删除。 删除冗余更新众所周知，windows系统会自动更新，这也是许多人弃windows的一大原因，然而windows还是要用的，于是我找到了一种可以清理多余的windows更新文件的方法。 首先右键左下角开始菜单，选择“Windows PowerShell（管理员）” 弹出是否允许进行更改选择“是”。 输入命令dism.exe /Online /Cleanup-Image /AnalyzeComponentStore 这时候会显示“推荐使用组件存储清理：是or否”，因为我前不久清过，所以这里显示为“否”，那么就别清理了。如果显示为“是”，那么进行第四步。 输入命令dism.exe /online /Cleanup-Image /StartComponentCleanup这样电脑就会开始清理啦。这个过程会比较长，不要着急和担心，在这期间你可以做些别的事情，比如评论我的博客。 重装系统俗话说得好“大力出奇迹”，重装系统无疑是最有效清理空间的一种方法。只要备份好数据，重装其实没有想象的那么困难。我本人这一年多来就重装过3次系统(两次是被迫的…)，其实装了几次就熟练了，我曾看到某linux大牛（忘了是谁）总共重装了19次linux。你可以在我的博文中看到如何在双系统情况下重装ubuntu的过程。]]></content>
  </entry>
  <entry>
    <title><![CDATA[html笔记：制作web时的一些小技巧与小问题]]></title>
    <url>%2F2019%2F09%2F14%2Fhtml%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%88%B6%E4%BD%9Cweb%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[大一有一段时间，我沉迷于web前端制作网页，比较熟练地掌握了html的语法，还根据需要接触了一些CSS以及js的内容。说白了，html只是一种标记语言（不属于编程语言），但是它简单易学，且很容易获得可视化的效果，对于培养兴趣而言我感觉是很有帮助的。油管up主，现哈佛在读学霸John Fish（请科学上网）当初就是从html进入计算机世界的。下面贴一个我自己做的网页，是综合web三大语言编写的，大一的时候把自己需要的网站都放上面了，也有一种归属感吧。 主页上那个是python之禅，也是我很喜欢的一段文字，在python环境下import this就可以看到。由于上面的网页是我学web的时候边看书边编的，各种元素都尝试了一下，最后也没有美化一直到现在，所以大佬们勿喷哈。 小技巧我这里强烈推荐使用VScode写前端，它有很多强大的插件，我这里推荐其中一个吧。 如介绍所写，使用alt+B快捷键可以直接在默认浏览器下查看你写的网页，而shift+alt+B可以选浏览器查看，因为有些时候microsoft自带的edge浏览器无法实现你编写的效果（巨坑），推荐使用chrome打开浏览。使用这个插件能让你更快捷地预览你编写的效果并进行修改，大大提高了效率。其他的插件网上有很多推荐，也等待着你自己去发现，这里就不一一列出了。还有一个快捷的操作就是快速生成代码块，在VScode中是这样操作的（其他编辑器也应该类似）： 输入一个！： 按tab键或者回车： 这样就可以节省很多时间，非常方便。 小问题在我想使用web来打开我本地的txt文件时，我遇到过这样一个问题：打开的中文文档在浏览器中显示为乱码。在尝试其他浏览器后，我发现这不是浏览器的问题。最后我大致找到了两种解决办法： 一种是找到head下面的meta charset，修改代码如下： 另一种是另存为文件时修改一下格式，这里我们修改成“UTF-8”。另外我室友在使用python导入文件的时候也因为格式导致报错，修改成ANSI后即可。 希望通过上面两种方法的尝试能让你解决乱码问题，几种编码格式的区别在这里暂不说明，以后有空补上。]]></content>
  </entry>
  <entry>
    <title><![CDATA[anaconda笔记：conda的各种命令行操作]]></title>
    <url>%2F2019%2F09%2F13%2Fanaconda%E7%AC%94%E8%AE%B0%EF%BC%9Aconda%E7%9A%84%E5%90%84%E7%A7%8D%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[anaconda是一个开源的包、环境管理器，可以比较有效地配置多个虚拟环境，当python入门到一定程度时，安装anaconda是很必要的。前段时间室友学习python的时候问到过我一些相关的问题，我就在这里简单写一些我知道的以及我搜集到的知识。 环境变量安装anaconda过程中一个很重要的步骤就是配置环境变量，网上有很多手动添加环境变量的教程，其实很简单，只需添加三个路径，当然更简单的是直接在安装的时候添加到path（可以无视warning）。我想在这里写的是环境变量的概念问题，其实直到不久前帮同学安装我才明白。环境变量是指在操作系统中用来指定操作系统运行环境的一些参数。当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还会到path中指定的路径去找。这就是为什么不添加C:\Users\用户名\Anaconda3\Scripts到path就无法执行conda命令，因为此时conda.exe无法被找到。 conda与pip利用conda install与pip install命令来安装各种包的过程中，想必你也对两者之间的区别很疑惑，下面我就总结一下我搜集到的相关解答。简而言之，pip是python包的通用管理器，而conda是一个与语言无关的跨平台环境管理器。对我们而言，最显着的区别可能是这样的：pip在任何环境中安装python包，conda安装在conda环境中装任何包。因此往往conda list的数量会大于pip list。要注意的是，如果使用conda install多个环境时，对于同一个包只需要安装一次，有conda集中进行管理。但是如果使用pip，因为每个环境安装使用的pip在不同的路径下，故会重复安装，而包会从缓存中取。总的来说，我推荐尽早安装anaconda并且使用conda来管理python的各种包。 升级我们可以在命令行中或者anaconda prompt中执行命令进行操作。 123conda update conda #升级condaconda update anaconda #升级anaconda前要先升级condaconda update --all #升级所有包 在升级完成之后，我们可以使用命令来清理一些无用的包以释放一些空间： 12conda clean -p #删除没有用的包conda clean -t #删除保存下来的压缩文件（.tar） 虚拟环境conda list命令用于查看conda下的包，而conda env list命令可以用来查看conda创建的所有虚拟环境。 下面就简述一下如何创建这些虚拟环境。使用如下命令，可以创建一个新的环境：conda create -n Python27 python=2.7其中Python27是自定义的一个名称，而python=2.7是一个格式，可以变动等号右边的数字来改变python环境的kernel版本，这里我们安装的是python2.7版本（将于2020年停止维护）。在anaconda prompt中，我们可以看到我们处在的是base环境下，也就是我安装的python3环境下，我们可以使用下面两个命令来切换环境： 在创建环境的过程中，难免会不小心取了个难听的环境名，别担心，我们有方法来删除环境。conda remove -n 难听的名字 --all有时候一个环境已经配置好了，但我们想要重命名，这怎么办呢？可以这样办： 12conda create -n 新名字 --clone 老名字conda remove -n 老名字 --all 把环境添加到jupyter notebook首先通过activate进入想要添加的环境中，然后安装ipykernel，接下来就可以进行添加了。 12pip install ipykernelpython -m ipykernel install --name Python27 #Python27可以取与环境名不一样的名字，但方便起见建议统一 我们可以使用如下命令来查看已添加到jupyter notebook的kernel：jupyter kernelspec list显示如下： 我们也可以在jupyter notebook中的new或者kernel下查看新环境是否成功添加。在这里我想说明一下为什么要分开python的环境。由于python是不向后兼容的，分开环境可以避免语法版本不一引起的错误，同时这也可以避免工具包安装与调用的混乱。]]></content>
  </entry>
  <entry>
    <title><![CDATA[jupyter notebook笔记：一些细小的操作]]></title>
    <url>%2F2019%2F09%2F13%2Fjupyter-notebook%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%80%E4%BA%9B%E7%BB%86%E5%B0%8F%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[首先强烈安利jupyter notebook，它是一种交互式笔记本，安装anaconda的时候会一并安装，下载VS的时候也可以选择安装。我是在初学机器学习的时候接触jupyter notebook的，立刻就被它便捷的交互与结果呈现方式所吸引，现在python编程基本不使用其他的软件。其实完全可以在初学python的时候使用jupyter notebook，可以立即得到反馈以及分析错误，可以进步很快！ 打开操作当初安装好之后还不了解，每次打开jupyter notebook都会先弹出一个黑框框，这时候千万别关掉，等一会就能来到网页。另外打开之后也别关掉，使用的时候是一直需要的，因为只有开着才能访问本机web服务器发布的内容。 另外你也可以不通过快捷方式，直接在命令行中直接输入jupyter notebook来打开它。有些时候，当你插入硬盘或者需要直接在特定的目录下打开jupyter notebook（它的默认打开是在“usr/用户名/”路径下），那你可以在输入命令的后面加上你想要的路径。 123jupyter notebook D:\ #打开D盘，于我是我的移动硬盘jupyter notebook E:\ #我的U盘jupyter notebook C:\Users\用户名\Desktop #在桌面打开 快捷键操作在jupyter notebook中可以通过选中cell然后按h的方式查询快捷键。 其他在jupyter notebook中可以直接使用markdown，这对学习可以起到很大的辅助作用，markdown的基本操作可以看我的另一篇博文markdown笔记：markdown的基本使用此外，在我的博文anaconda笔记：conda的各种命令行操作中，也介绍了如何将python的虚拟环境添加到jupyter notebook中，欢迎阅读。]]></content>
  </entry>
  <entry>
    <title><![CDATA[markdown笔记：markdown的基本使用]]></title>
    <url>%2F2019%2F09%2F13%2Fmarkdown%E7%AC%94%E8%AE%B0%EF%BC%9Amarkdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[既然要写技术博客，那么markdown肯定是必备的了，这篇文章就来介绍一下markdown的基本使用操作。 介绍Markdown是一种可以使用普通文本编辑器编写的标记语言，其功能比纯文本更强，因此许多程序员用它来写blog。在这里我先推荐一款markdown编辑器——typora，大家可以免费下载使用。 注意在我刚开始使用markdown的时候总是跳进这个坑，在这里提上来提醒一下，在使用markdown标记后要添加文字时，需要在相应标记后空一格，否则标记也会被当作文本来处理，例如我输入“#####错误”时： #####错误正确的做法是输入“##### 正确”： 正确一种简单的判别方法就是使用IDE，这样对应的标记就会有语法高亮。 使用 标题话不多说，直接示范：123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题为了方便阅读，我约定自己一般仅使用一、三、五级三种标题。 字体还是直接示范：1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 引用123&gt;我引用&gt;&gt;我还引用&gt;&gt;&gt;&gt;&gt;&gt;我再引用 我引用 我还引用 我再引用 扶我起来，我还能继续引用！ 引用是可以嵌套的，可以加很多层，我一般使用一个&gt;来表示额外的需要注意的内容。另外，如果想让下一段文字不被引用，需要空一行。 分割线分割线使用三个及以上的-或*就可以。有时候用---会造成别的文字的格式变化，因此我在使用VScode编辑时，如果看到---被高亮（分割线正常其作用时应该不高亮），就会改用***。12---*** 效果如下： 图片markdown中添加图片的语法是这样的：![显示在图片下方的文字]（图片地址 &quot;图片title&quot;）其中title可加可不加，它就是鼠标移动到图片上时显示的文字。然而我在使用hexo搭建我的个人博客的过程中，遇到了使用上述语法图片却无法显示的情况，因此我改用了下列标签插件：1&#123;% asset_img xxxxx.xxx 图片下方的名字 %&#125; 其中xxxxx.xxx只需直接输入图片名称以及格式即可，因为我使用了hexo-asset-image插件，它可以在_posts文件中创建与博文名称相同的对应的文件夹，只需把图片移入即可。其安装命令：npm install hexo-asset-image --save也可用cnpm更快地安装：cnpm install hexo-asset-image --save 超链接由于我希望在新的页面打开链接，而似乎markdown本身的语法不支持在新标签页打开链接，因此我推荐直接使用html语言来代替。&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt; 列表 无序列表 123- 列表内容+ 列表内容* 列表内容 列表内容 列表内容 列表内容 有序列表 1231. 列表内容2. 列表内容3. 列表内容 列表内容 列表内容 列表内容可以看到，上面显示的列表是有嵌套的，方法就是敲三个空格缩进。 表格1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 表头 表头 表头 内容 内容 内容 内容 内容 内容 其中第二行的作用分割表头和内容，-有一个就行，为了对齐可多加几个。此外文字默认居左，有两种改变方法：两边加：表示文字居中。右边加：表示文字居右。 代码最后的最后，是我最喜欢ctrl+C+V的代码了。单行或句中代码显示方式：1`来复制我呀` 其中`在键盘的左上角，我当初找了好久。多行代码块的写法就是用上下两对```围住。好了于是你现在就可以自由的复制粘贴啦。]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo笔记：开始创建个人博客——方法及原因]]></title>
    <url>%2F2019%2F09%2F13%2Fhexo%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8E%9F%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[大家好，这是我的第一篇博文，这也是我的第一个自己搭建的网站，既然搭了，那第一篇就讲讲我搭建的过程吧。 安装步骤 安装node.js 进入官网。 选择对应系统（我这里用win10），选择LTS（长期支持版本）安装，安装步骤中一直选择next即可。 安装完后就可以把安装包删除了。 安装git 进入官网。 选择对应系统的版本下载，同样也是按默认安装。 安装成功后，你会在开始菜单中看到git文件夹。 其中Git Bash与linux和mac中的终端类似，它是git自带的程序，提供了linux风格的shell，我们可以在这里面执行相应的命令。 注意：bash中的复制粘贴操作与linux中类似，ctrl+C用于终止进程，可以用鼠标中键进行粘贴操作。不嫌麻烦的话可以使用ctrl+shift+C和ctrl+shift+V进行复制粘贴操作。 安装hexo hexo是一个快速、简洁且高效的博客框架，在这里我们使用hexo来搭建博客。 首先，新建一个名为“blog”的空文件夹，以后我们的操作都在这个文件夹里进行，可以在bash中使用pwd命令查看当前所处位置。 创建这个文件夹的目的是万一因为创建的博客出现问题或者不满意想重来等原因可以直接简单地把文件夹删除，也方便了对整个网站本地内容的移动。 打开新建的文件夹，右键空白处，选择Git Bash Here。 接下来我们输入两行命令来验证node.js是否安装成功。 如出现如图所示结果，则表明安装成功。 为了提高以后的下载速度，我们需要安装cnpm。cnpm是淘宝的国内镜像，因为npm的服务器位于国外有时可能会影响安装。 继续在bash中输入如下命令安装cnpm： npm install -g cnpm --registry=https://registry.npm.taobao.org 检验安装是否成功，输入cnpm： 接下来我们安装hexo，输入命令： cnpm install -g hexo-cli 和上面一样，我们可以用hexo -v来验证是否成功安装hexo，这里就不贴图了。 接下来我们输入如下命令来建立整个项目： hexo init 你会发现你的文件夹中多了许多文件，你也可以用ls -l命令来看到新增的文件。 完成本地环境的搭建 至此，我们已经完成了本地环境的搭建，在这里，我想先介绍hexo中常用的命令。 hexo n &quot;文章标题&quot;用于创建新的博文（欲删除文章，直接删除md文件并用下面的命令更新即可）。 hexo shexo会监视文件变动并自动更新，通过所给的localhost:4000/就可以直接在本地预览更新后的网站了。 三步曲： 123hexo clean #清除缓存，网页正常情况下可以忽略此条命令，执行该指令后，会删掉站点根目录下的public文件夹。hexo g #generate静态网页（静态网页这里指没有前端后端的网页而不是静止），该命令把md编译为html并存到public文件目录下。hexo d #将本地的更改部署到远端服务器（需要一点时间，请过一会再刷新网页）。 如果出现ERROR Deployer not found: git报错，可以使用npm install --save hexo-deployer-git命令解决。 注意：由于部署到远端输入密码时密码不可见，有时候会导致部署失败，只有出现INFO Deploy done: git的结果才表明部署成功，否则再次部署重输密码即可。 现在我们在bash中运行hexo s，打开浏览器，输入localhost:4000/，就可以看到hexo默认创建的页面了。 部署到远端服务器 为了让别人能访问到你搭建的网站，我们需要部署到远端服务器。 这里有两种选择，一种是部署到github上，新建一个repository，然后创建一个xxxxx.github.io域名（这里xxxxx必须为你的github用户名）。 另一种选择是部署到国内的coding，这是考虑到访问速度的问题，不过我选择的是前者，亲测并没感觉有速度的困扰。 个人比较推荐用github pages创建个人博客。 部署这块网上有许多教程，这里不详细解释了，以后有机会补上。 在部署的时候涉及到对主题配置文件的操作，linux和mac用户可以使用vim进行编辑，不过也可以使用VScode、sublime等代码编辑器进行操作。 创建原因首先说明，我只是一个刚起步的入门级小白，懂得不多，别喷我哈~步入大二，虽然我是大学才算真正接触编程，但一年多下来我也接触并且学习了不少技术知识。接触的多了、遇到的问题也复杂了起来，导致每次百度到的答案不一定能够解决我遇到的问题。此外，之前在学习编程语言、操作系统、ml、dl等知识的时候，为方便起见利用文本记了些笔记。然而笔记分散在四处，不方便管理与查看，因此就萌生了写博客的想法。由于个人比较喜欢自由DIY，所以没有使用CSDN、博客园等知名技术博客网站。最后还是非常感谢我的华科校友程序羊在b站和其他站点上分享的各种经验，我就是通过他的视频来搭建起自己的第一个博客网站的。他的其他视频也给了我很多启迪。最后，最关键的原因，还是因为今天中秋节有空闲的时间哈哈，祝大家节日快乐！]]></content>
  </entry>
</search>
